/*Selectors are used to select the HTML elements you want to style. you can modify multiple elements
by putting a comma between each element*/
html{
    height: auto;
    display: table;
    margin: auto;
    max-width: 700px;
    background-color: rgb(68, 38, 66);
}
body {
    background-color: rgb(254, 213, 255);
    /*borders are used to separate the content of an element from its surrounding elements.*/
    border: solid 5px rgb(110, 0, 101);
    /*margins generate space between the border of an element and surrounding elements. we can change the
    margin for specific directions by using margin-left, margin-top, margin-right and margin-bottom*/
    margin: 10px;
    border-radius: 20px;
    /*Padding generates space between the content and the border of an element.  we can change the
    padding for specific directions by using padding-left, padding-top, padding-right and padding-bottom.
    alternatively, we can set the padding property for specific directions in a single line like
    "padding: 20px 0 20px 0" from top, right, bottom then left, leaving out "px" for empty padding.*/
    padding: 20px;
    font-family: Arial, Helvetica, sans-serif;
    display: table-cell;
    vertical-align: middle;
}
h1, h2 {
    /*we can change the alignment of the text by using text-align*/
    text-align: center;
    border: solid 5px rgb(224, 170, 220);
    border-radius: 25px;
    background-color: rgb(224, 170, 220);
    padding: 3px 0 3px 0
}
/*In CSS, a class is a selector that allows you to apply styles to multiple 
elements on a web page. Classes are defined in a CSS file and can be applied 
to HTML elements using the class attribute.*/
.purple-text {
    color: rgb(110, 0, 101);
}
p {
    /*like padding, we can use shorthand to change the margin for specific directions*/
    margin: 0 20px 0 20px
}
a {
    color: rgb(0, 82, 102);
    font-weight: bold;
    font-style: italic;
    /*display: block; makes the link fill the width of the container*/
    display: block;
    text-align: center;
    background-color: rgb(168, 206, 216);
    border: solid 1px rgb(168, 206, 216);
    border-radius: 50px;
    margin: 5px 30px 5px 30px;
    padding: 3px 3px 3px 3px;
}
/*We are using the ID attribute from our img tag for our 
selector in the below line of code*/
#picture {
    border: solid 5px rgb(110, 0, 101);
    /*we can also use shorthand to change the border radius for specific directions starting from
    top-left and going clockwise*/
    border-radius: 10px 100px 10px 100px;
    /*We can size an element relative to its 
    parent using a percentage. Here, 100% means the image takes up 100% of the width of the body element.*/
    height: 75%;
}
button {
    color: rgb(0, 82, 102);
    font-size: 18px;
    font-weight: bold;
    font-style: italic;
    text-align: center;
    background-color: rgb(168, 206, 216);
    border: solid 1px rgb(168, 206, 216);
    border-radius: 50px;
    margin: 0 0 0 10px;
}
/*instead of writing a new rule in CSS to style different elements the same way, we can additional selectors seperated by a comma.
this way, all input elements and all select elements will have the same styling applied.
when we do this, it is called a "grouping selector,"  because we are grouping elements under the same rule.*/
/*we can group selectors of any type*/
input, select {
    margin: 0 0 20px 20px;
    border: solid 5px rgb(224, 170, 220);
    border-radius: 50px;
    background-color: rgb(224, 170, 220);
    color: rgb(110, 0, 101);
}
#result {
    color: rgb(110, 0, 101);
    margin: 0 70px 0 70px;
    font-weight: bold;
    font-style: italic;
    text-align: center;
    border: solid 5px rgb(221, 170, 220);
    border-radius: 50px;
    background-color: rgb(224, 170, 220);
    padding: 3px 0 3px 0;
    height: 18px;
}

.skills {
    columns: 2;
    margin: 20px 0 20px 0;
}

.skillSection {
    color: rgb(110, 0, 101);
    margin: 0 70px 0 0;
    font-weight: bold;
    font-style: italic;
    text-align: center;
    border: solid 5px rgb(221, 170, 220);
    border-radius: 50px;
    background-color: rgb(224, 170, 220);
    padding: 3px 0 3px 0;
    height: 18px;
}

.resultSkills {
    color: rgb(110, 0, 101);
    margin: 10px 125px 10px 75px;
    font-weight: bold;
    font-style: italic;
    text-align: center;
    border: solid 5px rgb(221, 170, 220);
    border-radius: 50px;
    background-color: rgb(224, 170, 220);
    padding: auto;
    height: 18px;
}

.skillsButton {
    margin: 5px 150px 5px 100px;
}

#adviceText {
    margin: 0 0 20px 0;
    border: solid 5px rgb(224, 170, 220);
    border-radius: 5px;
    background-color: rgb(224, 170, 220);
    color: rgb(110, 0, 101);
    margin: 10px 0 0 20px;
    min-width: 600px;
    display: block;
}

#feedbackSubmit {
    margin: 0 0 0 20px;
}

.wrapper {
    /*The CSS grid layout module excels at dividing a page into major regions or 
    defining the relationship in terms of size, position, and layer, between parts 
    of a control built from HTML primitives.*/
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    grid-template-rows: repeat(1, 1fr);
    gap: 10px;
}
.one {
    grid-column: 1;
    grid-row: 1;
}

.two {
    grid-column: 2;
    grid-row: 1;
}

.three {
    grid-column: 3;
    grid-row: 1;
}

#secret {
    width:200px;
    border: auto;
    border-radius: 100px;
    padding: 5px 0 0 0;
}

span {
    color: blueviolet;
}

li {
    padding: 2px 0 0 0;
}
/*When a child element receives a property from its parent, we call this inheritance.*/
/*only certain properties are inherited from the parent element.  for example, a border is not inherited.*/
.groupingExample {
    background-color: rgba(148, 42, 148, 0.082);
    border-radius: 25px;
    padding: 1px 50px 25px 50px;
    margin: 5px 25px 10px 25px;
}

.bold {
    font-weight: bold;
}
.italic {
    font-style: italic;
}
.color {
    color: purple;
}

/*Normal flow is the way elements display on a webpage by default.
For example, headings and paragraphs appear on their own line while links and buttons get grouped on the same line.*/
/*The display property decides whether or not an element appears on the same line.*/
.a {
    /*For a elements, the default value of the display property is inline.*/
    display: inline;
    /*height and width don't work on inline elements. Instead, they keep the size of the content inside them.*/
    width: 5000px;
    /*Examples of inline elements include a, em and strong. They all appear on the same line when coded after each other.*/
    /*If multiple inline elements don't fit inside the width of their parent, the elements towards the end move down to the next line.*/
}

/*Elements like p, div, or h3 work differently in normal flow than inline elements. They always appear on separate lines.*/
/*The display value for elements taking the entire width of their parent element is block.*/
.p {
    display: block;
    /*Since they take up the full width of their parent, block elements always start on a new line.*/

}

/*Elements like button and img have inline-block as their default display value.*/
.button .img {
    display: inline-block;
    /*inline-block puts elements on the same line, while also letting us change their size.*/
    height: 50px;
    width: 150px;
}

/*We can set an element's display property to a different value when we want to change how they look and behave on a webpage.*/
.a {
    display: inline-block;
}

/*We can use a newer feature of CSS called Flex Box to create more responsive web pages.*/

/*Flexbox gives developers a lot of flexibility they never had before. It's an essential skill that lets you do more with less code.
With flexbox, elements adapt in size to fit perfectly on different screens. Press the button to see.*/

/*To apply flexbox, we first have to make sure the webpage has a parent element with nested child elements inside. since our website makes use of the div element, this is already the case.*/
/*the parent element of a flex box is called a flex container. elements inside of the flex container are called flex items.*/

/*To apply flexbox to the items inside the container, we add display: flex; to the container.*/

.container {
    display: flex;
}

/*elements inside of the flex container will automatically resize to fit the parent container*/
/*By default, flexbox tries to fit items inside a container on only one row. this is the default setting of flex-direction property called "row"*/
/*setting the flex-box direction to column organises elements in a column in the order they appear in the html code. elements will stretch to fill the width of the page*/
/*we can reverse the start points and flow by adding "reverse" to the property*/
/*The flex-direction defines what's known as the main axis, an imaginary line that refers to the direction and orientation of flex items.*/


/*Justifying means changing how elements are grouped and spaced on the main axis. To justify flex items, we use the justify-content property.*/

/*by default, justify-content is set to flex-start*/
/*flex-start means all of the flex items are grouped together at the beginning of the container.*/

/*To group all items at the end of the container, we use flex-end.*/
/*justify-content also works when flex-direction is set to column.*/
/*With flex-direction set to column, flex-end means all the content is grouped at the bottom of the container.*/